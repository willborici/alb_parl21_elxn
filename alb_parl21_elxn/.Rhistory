for (j in (i+1):n) {
B <- qvTV[j, ] %>% dplyr::select(pPS, pPD, pOP)
rw <- data.frame(qvTV[i, ]$PollingStation,
qvTV[j, ]$PollingStation,
Divergence(A, B, metric = 1))
names(rw) <- c("X", "Y", "D")
divergenceSet <- rbind(divergenceSet, rw)
}
}
view(berat)
gc()
# Fetch suspected regions from the 2D chart
# Chart located here("out/PS-fingerprint-smears.png")
smears <- subset(gg$data,
pTurnout > 0.3 & pTurnout < 0.6 & pPS > 0.6 & pPS < 0.75 |
pTurnout > 0.5 & pTurnout < 0.6 & pPS > 0.57 & pPS < 0.65 |
pTurnout > 0.57 & pTurnout < 0.62 & pPS > 0.47 & pPS < 0.62) %>%
dplyr::select(District,
Municipality,
AdministrativeUnit,
PollingStation,
pTurnout,
pPS,
PS,
pPD,
PD)
view(smears)
sum(smears$PS)
# Remove Kukes, Lezhe, Shkoder as they add up to a minority of 11 stations
smears <- subset(smears,
District != "Kukes" &
District != "Lezhe" &
District != "Shkoder")
sum(smears$PS)
# Store polling stations in a tibble
berat <- subset(smears, District == "Berat")
view(berat)
# ----
# Info-theoretic analysis using a normalized distance metric
qvTV <- berat
# Fetch suspected regions from the 2D chart
# Chart located here("out/PS-fingerprint-smears.png")
smears <- subset(gg$data,
pTurnout > 0.3 & pTurnout < 0.6 & pPS > 0.6 & pPS < 0.75 |
pTurnout > 0.5 & pTurnout < 0.6 & pPS > 0.57 & pPS < 0.65 |
pTurnout > 0.57 & pTurnout < 0.62 & pPS > 0.47 & pPS < 0.62) %>%
dplyr::select(District,
Municipality,
AdministrativeUnit,
PollingStation,
pTurnout,
pPS,
PS,
pPD,
PD,
ValidBallots)
# Remove Kukes, Lezhe, Shkoder as they add up to a minority of 11 stations
smears <- subset(smears,
District != "Kukes" &
District != "Lezhe" &
District != "Shkoder")
# Store polling stations in a tibble
berat <- subset(smears, District == "Berat")
view(berat)
# get neighbors of an admin unit & plot after joining with the auTurnout tibble
# note: for the albania_wrangled tibble, use the correpsonding admin unit name,
# which may be different from the name in the ngh tibble (mapping differences)
ngh <- GetNeighbors(albania_wrangled, "Berat", "ALB.1.1.1_1", neighbors)
ngh@data <- inner_join(ngh@data, auTurnout, by = c("GID_3" = "MappingID"),  )
ngh@data <- inner_join(ngh@data, beratAU, by = c("AdministrativeUnit" = "AdministrativeUnit"))
# get center points of the polygons; the row IDs are the GID_3 IDs:
centers <- as.data.frame(coordinates(ngh))
centers <- cbind(centers, rownames(centers))
names(centers) = c("c1", "c2", "cid")
centers <- inner_join(centers, auTurnout, by = c("cid" = "MappingID"))
centers <- inner_join(centers, beratAU, by = c("AdministrativeUnit" = "AdministrativeUnit"))
# plot with centroids
plotAU <- PlotNeighborsWithVoteShares(ngh, "Berat", centers)
plotAU
# ----
# Info-theoretic analysis using a normalized distance metric
qvTV <- berat
# group & summarize by admin unit
# Group parties other than PD or PS into a new group, OP,
# which makes the distance metric computable
qvTV <- within(qvTV,
OP <- ValidBallots - PS - PD)
qvTV <- within(qvTV,
pOP <- 1.0 - pPS - pPD)
divergenceSet <- NULL
n <- length(qvTV$pPS)
for (i in 1:(n-1)){
A <- qvTV[i, ] %>% dplyr::select(pPS, pPD, pOP)
for (j in (i+1):n) {
B <- qvTV[j, ] %>% dplyr::select(pPS, pPD, pOP)
rw <- data.frame(qvTV[i, ]$PollingStation,
qvTV[j, ]$PollingStation,
Divergence(A, B, metric = 1))
names(rw) <- c("X", "Y", "D")
divergenceSet <- rbind(divergenceSet, rw)
}
}
view(divergenceSet)
view(berat)
view(divergenceSet)
view(divergenceSet[which(divergenceSet$X == "P-3314" & divergenceSet$Y == "P-3324")])
view(divergenceSet[which(divergenceSet$X == "P-3314" & divergenceSet$Y == "P-3324"), ])
view(divergenceSet[which(divergenceSet$X == "P-3314" && divergenceSet$Y == "P-3324"), ])
view(divergenceSet[which(divergenceSet$X == "P-3314"), ])
view(which(divergenceSet$X == "P-3314"))
divergenceSet[which(divergenceSet$X == "P-3314")]
source('~/Documents/Research/Albania/Voting/alb_parl21_elxn/voter_manipulation.R', echo=TRUE)
view(subset(divergenceSet, X="P-3317", Y="P-3324"))
view(subset(divergenceSet, X=="P-3317", Y=="P-3324"))
view(subset(divergenceSet, X %in% "3317", Y %in% "3324"))
view(subset(divergenceSet, X %in% "%3317%", Y %in% "%3324%"))
view(divergenceSet)
view(subset(divergenceSet, X %in% "%3317%"))
view(subset(divergenceSet, X = "P-3317"))
view(subset(divergenceSet, X == "P-3317"))
view(divergenceSet[divergenceSet$X = "P-3317", divergenceSet$Y = "P-3324",])
view(divergenceSet[divergenceSet$X == "P-3317", divergenceSet$Y == "P-3324",])
view(divergenceSet[divergenceSet$X == "P-3317", divergenceSet$Y == "P-3324"])
view(divergenceSet[divergenceSet$X == "P-3317",])
tyoeof(divergenceSet)
typeof(divergenceSet)
divergenceSet <- data.frame()
n <- length(qvTV$pPS)
for (i in 1:(n-1)){
A <- qvTV[i, ] %>% dplyr::select(pPS, pPD, pOP)
for (j in (i+1):n) {
B <- qvTV[j, ] %>% dplyr::select(pPS, pPD, pOP)
rw <- data.frame(qvTV[i, ]$PollingStation,
qvTV[j, ]$PollingStation,
Divergence(A, B, metric = 1))
names(rw) <- c("X", "Y", "D")
divergenceSet <- rbind(divergenceSet, rw)
}
}
typeof(divergenceSet)
typeof(as.data.frame(divergenceSet))
view(divergenceSet)
divergenceSet[1]
divergenceSet[[1]]
divergenceSet[divergenceSet$X = "P-3317"]
divergenceSet[divergenceSet$X = "P-3317", ]
divergenceSet[divergenceSet$X == "P-3317", ]
divergenceSet[divergenceSet$X == "P-3317" ]
for (i in 1:(n-1)){
A <- qvTV[i, ] %>% dplyr::select(pPS, pPD, pOP)
for (j in (i+1):n) {
B <- qvTV[j, ] %>% dplyr::select(pPS, pPD, pOP)
rw <- data.frame(qvTV[i, ]$PollingStation,
qvTV[j, ]$PollingStation,
Divergence(A, B, metric = 1))
names(rw) <- c("X", "Y", "D")
divergenceSet <- as.data.frame(rbind(divergenceSet, rw))
}
}
view(divergenceSet)
typeof(divergenceSet)
divergenceSet <- data.frame("","",0)
n <- length(qvTV$pPS)
for (i in 1:(n-1)){
A <- qvTV[i, ] %>% dplyr::select(pPS, pPD, pOP)
for (j in (i+1):n) {
B <- qvTV[j, ] %>% dplyr::select(pPS, pPD, pOP)
rw <- data.frame(qvTV[i, ]$PollingStation,
qvTV[j, ]$PollingStation,
Divergence(A, B, metric = 1))
names(rw) <- c("X", "Y", "D")
divergenceSet <- as.data.frame(rbind(divergenceSet, rw))
}
}
# Various polling stations belonging to the same voting zone need to be grouped
# For instance: P-33111 and P-33112 should be grouped under P-3311
typeof(qvTV)
subset.data.frame(divergenceSet)
divergenceSet <- data.frame()
n <- length(qvTV$pPS)
for (i in 1:(n-1)){
A <- qvTV[i, ] %>% dplyr::select(pPS, pPD, pOP)
for (j in (i+1):n) {
B <- qvTV[j, ] %>% dplyr::select(pPS, pPD, pOP)
rw <- data.frame(qvTV[i, ]$PollingStation,
qvTV[j, ]$PollingStation,
Divergence(A, B, metric = 1))
names(rw) <- c("X", "Y", "D")
divergenceSet <- as.data.frame(rbind(divergenceSet, rw))
}
}
subset.data.frame(divergenceSet)
subset.data.frame(divergenceSet, X=="P-3285")
subset.data.frame(divergenceSet, X=="P-3285", Y == "P-3485")
subset.data.frame(divergenceSet, X=="P-3285" && Y == "P-3485")
subset.data.frame(divergenceSet, X == "P-3285", Y == "P-3485")
subset.data.frame(divergenceSet, X == "P-3285" & Y == "P-3485")
subset.data.frame(divergenceSet, X == "P-3285" && Y == "P-3485")
subset.data.frame(divergenceSet, X == "P-3317" & Y == "P-3324")
subset.data.frame(divergenceSet, X == "P-3324" & Y == "P-3317")
subset.data.frame(divergenceSet, X == "P-3324" & Y == "P-3328")
subset.data.frame(divergenceSet, X == "P-3325" & Y == "P-3326")
subset.data.frame(divergenceSet, X == "P-3339")
# Examine neghiboring polling stations manually
subset.data.frame(divergenceSet, X == "P-3339" & Y == "P-3345")
# Examine neghiboring polling stations manually
subset.data.frame(divergenceSet, X == "P-3313" & Y == "P-3314")
# Examine neghiboring polling stations manually
subset.data.frame(divergenceSet, X == "P-3314" & Y == "P-3313")
divergenceSet
# Examine neighboring polling stations manually
subset.data.frame(divergenceSet, X == "P-3313" )
# Examine neighboring polling stations manually
subset.data.frame(divergenceSet, X == "P-3314" )
# Examine neighboring polling stations manually
subset.data.frame(divergenceSet, X %in% "P-3313" & Y %in% "P-3314")
# Examine neighboring polling stations manually
subset.data.frame(divergenceSet, X %in% "P-3339" & Y %in% "P-3345")
# Examine neighboring polling stations manually
subset.data.frame(divergenceSet, X %in% "P-3313" & Y %in% "P-3314")
view(divergenceSet)
# Examine neighboring polling stations manually
subset.data.frame(divergenceSet, X %in% "P-3313*" & Y %in% "P-3314")
# Examine neighboring polling stations manually
subset.data.frame(divergenceSet, X %in% "P-3313%" & Y %in% "P-3314")
# Examine neighboring polling stations manually
subset.data.frame(divergenceSet, X %in% "P-3313*" & Y %in% "P-3314*")
# Examine neighboring polling stations manually
subset.data.frame(divergenceSet, X %in% "P-3313%" & Y %in% "P-3314%")
# Examine neighboring polling stations manually
subset.data.frame(divergenceSet, X %in% "P-33131" & Y %in% "P-3314")
# Examine neighboring polling stations manually
subset.data.frame(divergenceSet, X %in% "P-33131" & Y %in% "P-33141")
# Examine neighboring polling stations manually
subset.data.frame(divergenceSet, X %in% "P-33131")
# Examine neighboring polling stations manually
subset.data.frame(divergenceSet, X %in% "P-3314")
# Examine neighboring polling stations manually
subset.data.frame(divergenceSet, Y %in% "P-3314")
# Examine neighboring polling stations manually
subset.data.frame(divergenceSet, X %in% "P-33131"  & Y %in% "P-3316")
# Examine neighboring polling stations manually
subset.data.frame(divergenceSet,  & Y %in% "P-3316")
# Examine neighboring polling stations manually
subset.data.frame(divergenceSet,  Y %in% "P-3316")
divergenceSetFileBerat <- here("out/KL_Berat.csv")
divergenceSetFileDurres <- here("out/KL_Durres.csv")
write_csv(divergenceSet, divergenceSetFileBerat, append = FALSE, na = "NA")
# ----
# Info-theoretic analysis using a normalized distance metric
qvTV <- ngh@data
# group & summarize by admin unit
# Group parties other than PD or PS into a new group, OP,
# which makes the distance metric computable
qvTV <- within(qvTV,
OP <- ValidBallots - PS - PD)
# ----
# Info-theoretic analysis using a normalized distance metric
qvTV <- berat
# ----
# Info-theoretic analysis using a normalized distance metric
qvTV <- inner_join(ngh@data, berat, by = c("AdministrativeUnit" = "AdministrativeUnit"))
# group & summarize by admin unit
# Group parties other than PD or PS into a new group, OP,
# which makes the distance metric computable
qvTV <- within(qvTV,
OP <- ValidBallots - PS - PD)
qvTV <- within(qvTV,
pOP <- 1.0 - pPS - pPD)
qvTV
# ----
# Info-theoretic analysis using a normalized distance metric
qvTV <- inner_join(ngh@data, berat, by = c("AdministrativeUnit" = "AdministrativeUnit"))
# group & summarize by admin unit
# Group parties other than PD or PS into a new group, OP,
# which makes the distance metric computable
qvTV <- within(qvTV,
OP <- ValidBallots - PS - PD)
qvTV <- within(qvTV,
pOP <- 1.0 - pPS.y - pPD)
divergenceSet <- data.frame()
n <- length(qvTV$pPS.y)
for (i in 1:(n-1)){
A <- qvTV[i, ] %>% dplyr::select(pPS.y, pPD, pOP)
for (j in (i+1):n) {
B <- qvTV[j, ] %>% dplyr::select(pPS.y, pPD, pOP)
rw <- data.frame(qvTV[i, ]$PollingStation,
qvTV[j, ]$PollingStation,
Divergence(A, B, metric = 1))
names(rw) <- c("X", "Y", "D")
divergenceSet <- as.data.frame(rbind(divergenceSet, rw))
}
}
view(divergenceSet)
view(albania_wrangled@data)
# get neighbors of an admin unit & plot after joining with the auTurnout tibble
# note: for the albania_wrangled tibble, use the correpsonding admin unit name,
# which may be different from the name in the ngh tibble (mapping differences)
ngh <- GetNeighbors(albania_wrangled, "Berat", "ALB.1.1.1_1", neighbors)
ngh@data <- inner_join(ngh@data, auTurnout, by = c("GID_3" = "MappingID"),  )
ngh@data <- inner_join(ngh@data, beratAU, by = c("AdministrativeUnit" = "AdministrativeUnit"))
# get center points of the polygons; the row IDs are the GID_3 IDs:
centers <- as.data.frame(coordinates(ngh))
centers <- cbind(centers, rownames(centers))
names(centers) = c("c1", "c2", "cid")
centers <- inner_join(centers, auTurnout, by = c("cid" = "MappingID"))
centers <- inner_join(centers, beratAU, by = c("AdministrativeUnit" = "AdministrativeUnit"))
# plot with centroids
plotAU <- PlotNeighborsWithVoteShares(ngh, "Berat", centers)
plotAU
view(divergenceSet)
beratAU
berat
divergenceSet
view(left_join(berat, divergenceSet, by = c("PollingStation" = "X")))
view(divergenceSet)
write_csv(divergenceSet, divergenceSetFileBerat, append = FALSE, na = "NA")
divergenceSet <- data.frame()
n <- length(qvTV$pPS.y)
for (i in 1:(n-1)){
A <- qvTV[i, ] %>% dplyr::select(pPS.y, pPD, pOP)
for (j in (i+1):n) {
B <- qvTV[j, ] %>% dplyr::select(pPS.y, pPD, pOP)
rw <- data.frame(qvTV[i, ]$AdministrativeUnit,
qvTV[i, ]$PollingStation,
qvTV[j, ]$AdministrativeUnit,
qvTV[j, ]$PollingStation,
Divergence(A, B, metric = 1))
names(rw) <- c("X.AU", "X", "Y.AU", "Y", "D")
divergenceSet <- as.data.frame(rbind(divergenceSet, rw))
}
}
view(divergenceSet)
write_csv(divergenceSet, divergenceSetFileBerat, append = FALSE, na = "NA")
# Durres Suspects ----
view(distinct(subset(smears, select = c("AdministrativeUnit"),
District == "Durres")))
# Store polling stations in a tibble
durres <- subset(smears, District == "Durres")
# Aggregate polling station data into administrative units:
durresAU <- durres %>%
group_by(District, Municipality, AdministrativeUnit) %>%
summarize(pPS = mean(pPS),
.groups = 'drop')
view(durres)
# get neighbors of an admin unit & plot after joining with the auTurnout tibble
# note: for the albania_wrangled tibble, use the correpsonding admin unit name,
# which may be different from the name in the ngh tibble (mapping differences)
ngh <- GetNeighbors(albania_wrangled, "Durres", "ALB.3.1.1_1", neighbors)
ngh@data <- inner_join(ngh@data, auTurnout, by = c("GID_3" = "MappingID"),  )
ngh@data <- inner_join(ngh@data, durresAU, by = c("AdministrativeUnit" = "AdministrativeUnit"))
# get center points of the polygons; the row IDs are the GID_3 IDs:
centers <- as.data.frame(coordinates(ngh))
centers <- cbind(centers, rownames(centers))
names(centers) = c("c1", "c2", "cid")
centers <- inner_join(centers, auTurnout, by = c("cid" = "MappingID"))
centers <- inner_join(centers, durresAU, by = c("AdministrativeUnit" = "AdministrativeUnit"))
# plot with centroids
plotAU <- PlotNeighborsWithVoteShares(ngh, "Durres", centers)
plotAU
plotAU
# ----
# Info-theoretic analysis using a normalized distance metric for
# neighboring admin units
qvTV <- inner_join(ngh@data, durres, by = c("AdministrativeUnit" = "AdministrativeUnit"))
# group & summarize by admin unit
# Group parties other than PD or PS into a new group, OP,
# which makes the distance metric computable
qvTV <- within(qvTV,
OP <- ValidBallots - PS - PD)
qvTV <- within(qvTV,
pOP <- 1.0 - pPS.y - pPD)
divergenceSet <- data.frame()
n <- length(qvTV$pPS.y)
for (i in 1:(n-1)){
A <- qvTV[i, ] %>% dplyr::select(pPS.y, pPD, pOP)
for (j in (i+1):n) {
B <- qvTV[j, ] %>% dplyr::select(pPS.y, pPD, pOP)
rw <- data.frame(qvTV[i, ]$AdministrativeUnit,
qvTV[i, ]$PollingStation,
qvTV[j, ]$AdministrativeUnit,
qvTV[j, ]$PollingStation,
Divergence(A, B, metric = 1))
names(rw) <- c("X.AU", "X", "Y.AU", "Y", "D")
divergenceSet <- as.data.frame(rbind(divergenceSet, rw))
}
}
view(divergenceSet)
write_csv(divergenceSet, divergenceSetFileDurres, append = FALSE, na = "NA")
# Examine neighboring polling stations manually
subset.data.frame(divergenceSet, X %in% "P-1462" & Y %in% "P-1494")
# Examine neighboring polling stations manually
subset.data.frame(divergenceSet, X %in% "P-1494" & Y %in% "P-1462")
durres <- subset(gg$data, District == "Durres")
# Aggregate polling station data into administrative units:
durresAU <- durres %>%
group_by(District, Municipality, AdministrativeUnit) %>%
summarize(pPS = mean(pPS),
.groups = 'drop')
view(durres)
# get neighbors of an admin unit & plot after joining with the auTurnout tibble
# note: for the albania_wrangled tibble, use the correpsonding admin unit name,
# which may be different from the name in the ngh tibble (mapping differences)
ngh <- GetNeighbors(albania_wrangled, "Durres", "ALB.3.1.1_1", neighbors)
ngh@data <- inner_join(ngh@data, auTurnout, by = c("GID_3" = "MappingID"),  )
ngh@data <- inner_join(ngh@data, durresAU, by = c("AdministrativeUnit" = "AdministrativeUnit"))
# get center points of the polygons; the row IDs are the GID_3 IDs:
centers <- as.data.frame(coordinates(ngh))
centers <- cbind(centers, rownames(centers))
names(centers) = c("c1", "c2", "cid")
centers <- inner_join(centers, auTurnout, by = c("cid" = "MappingID"))
centers <- inner_join(centers, durresAU, by = c("AdministrativeUnit" = "AdministrativeUnit"))
# plot with centroids
plotAU <- PlotNeighborsWithVoteShares(ngh, "Durres", centers)
plotAU
# ----
# Info-theoretic analysis using a normalized distance metric for
# neighboring admin units
qvTV <- inner_join(ngh@data, durres, by = c("AdministrativeUnit" = "AdministrativeUnit"))
# group & summarize by admin unit
# Group parties other than PD or PS into a new group, OP,
# which makes the distance metric computable
qvTV <- within(qvTV,
OP <- ValidBallots - PS - PD)
qvTV <- within(qvTV,
pOP <- 1.0 - pPS.y - pPD)
divergenceSet <- data.frame()
n <- length(qvTV$pPS.y)
for (i in 1:(n-1)){
A <- qvTV[i, ] %>% dplyr::select(pPS.y, pPD, pOP)
for (j in (i+1):n) {
B <- qvTV[j, ] %>% dplyr::select(pPS.y, pPD, pOP)
rw <- data.frame(qvTV[i, ]$AdministrativeUnit,
qvTV[i, ]$PollingStation,
qvTV[j, ]$AdministrativeUnit,
qvTV[j, ]$PollingStation,
Divergence(A, B, metric = 1))
names(rw) <- c("X.AU", "X", "Y.AU", "Y", "D")
divergenceSet <- as.data.frame(rbind(divergenceSet, rw))
}
}
view(divergenceSet)
gc()
write_csv(divergenceSet, divergenceSetFileDurres, append = FALSE, na = "NA")
# Examine neighboring polling stations manually
subset.data.frame(divergenceSet, X %in% "P-1413" & Y %in% "P-1413")
# Examine neighboring polling stations manually
subset.data.frame(divergenceSet, X %in% "P-1413" & Y %in% "P-1465")
# Examine neighboring polling stations manually
subset.data.frame(divergenceSet, X %in% "P-1413" & Y %in% "P-1414")
# Examine neighboring polling stations manually
subset.data.frame(divergenceSet, X %in% "P-1412" & Y %in% "P-1413")
# Examine neighboring polling stations manually
subset.data.frame(divergenceSet, X %in% "P-1411" & Y %in% "P-1412")
# Examine neighboring polling stations manually
subset.data.frame(divergenceSet, X %in% "P-1418" & Y %in% "P-1421")
# Examine neighboring polling stations manually
subset.data.frame(divergenceSet, X %in% "P-1372" & Y %in% "P-1422")
# Examine neighboring polling stations manually
subset.data.frame(divergenceSet, X %in% "P-1372%" & Y %in% "P-1422%")
# Examine neighboring polling stations manually
subset.data.frame(divergenceSet, X %in% "P-13721" & Y %in% "P-1422")
# Examine neighboring polling stations manually
subset.data.frame(divergenceSet, X %in% "P-1422" & Y %in% "P-1372")
# Examine neighboring polling stations manually
subset.data.frame(divergenceSet, X %in% "P-1432" & Y %in% "P-1369")
# Examine neighboring polling stations manually
subset.data.frame(divergenceSet, X %in% "P-1432" & Y %in% "P-1518")
# get neighbors of an admin unit & plot after joining with the auTurnout tibble
# note: for the albania_wrangled tibble, use the correpsonding admin unit name,
# which may be different from the name in the ngh tibble (mapping differences)
ngh <- GetNeighbors(albania_wrangled, "Katund i Ri", "ALB.3.1.4_1", neighbors)
ngh@data <- inner_join(ngh@data, auTurnout, by = c("GID_3" = "MappingID"),  )
ngh@data <- inner_join(ngh@data, durresAU, by = c("AdministrativeUnit" = "AdministrativeUnit"))
# get center points of the polygons; the row IDs are the GID_3 IDs:
centers <- as.data.frame(coordinates(ngh))
centers <- cbind(centers, rownames(centers))
names(centers) = c("c1", "c2", "cid")
centers <- inner_join(centers, auTurnout, by = c("cid" = "MappingID"))
centers <- inner_join(centers, durresAU, by = c("AdministrativeUnit" = "AdministrativeUnit"))
# plot with centroids
plotAU <- PlotNeighborsWithVoteShares(ngh, "Katund I Ri", centers)
plotAU
# ----
# Info-theoretic analysis using a normalized distance metric for
# neighboring admin units
qvTV <- inner_join(ngh@data, durres, by = c("AdministrativeUnit" = "AdministrativeUnit"))
# group & summarize by admin unit
# Group parties other than PD or PS into a new group, OP,
# which makes the distance metric computable
qvTV <- within(qvTV,
OP <- ValidBallots - PS - PD)
qvTV <- within(qvTV,
pOP <- 1.0 - pPS.y - pPD)
divergenceSet <- data.frame()
n <- length(qvTV$pPS.y)
for (i in 1:(n-1)){
A <- qvTV[i, ] %>% dplyr::select(pPS.y, pPD, pOP)
for (j in (i+1):n) {
B <- qvTV[j, ] %>% dplyr::select(pPS.y, pPD, pOP)
rw <- data.frame(qvTV[i, ]$AdministrativeUnit,
qvTV[i, ]$PollingStation,
qvTV[j, ]$AdministrativeUnit,
qvTV[j, ]$PollingStation,
Divergence(A, B, metric = 1))
names(rw) <- c("X.AU", "X", "Y.AU", "Y", "D")
divergenceSet <- as.data.frame(rbind(divergenceSet, rw))
}
}
divergenceSetFileKatund <- here("out/KL_KatundIRi.csv")
view(divergenceSet)
write_csv(divergenceSet, divergenceSetFileKatund, append = FALSE, na = "NA")
